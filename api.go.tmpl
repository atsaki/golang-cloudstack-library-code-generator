package cloudstack

import (
    "encoding/json"
    "fmt"
    {{ if .IsAsync }}
      "time"
    {{ end }}
)

type {{ title .Name }}Parameter struct {
  {{ range $param := .Params }}
    {{ title $param.Name }} {{ paramType $param.Type }}
  {{ end }}
}

{{ range $param := .Params }}
  {{ if isString $param.Type }}
    func (p *{{ title $.Name }}Parameter) Set{{ title $param.Name }}(s string) {
        if p.{{ title $param.Name }} == nil {
            p.{{ title $param.Name }} = new(String)
        }
        p.{{ title $param.Name }}.SetValue(s)
    }
  {{ end }}

  {{ if isBoolean $param.Type }}
    func (p *{{ title $.Name }}Parameter) Set{{ title $param.Name }}(b bool) {
        if p.{{ title $param.Name }} == nil {
            p.{{ title $param.Name }} = new(Boolean)
        }
        p.{{ title $param.Name }}.SetValue(b)
    }
  {{ end }}

  {{ if isInteger $param.Type }}
    func (p *{{ title $.Name }}Parameter) Set{{ title $param.Name }}(n int) {
        if p.{{ title $param.Name }} == nil {
            p.{{ title $param.Name }} = new(Integer)
        }
        p.{{ title $param.Name }}.SetValue(n)
    }
  {{ end }}

  {{ if isUUID $param.Type }}
    func (p *{{ title $.Name }}Parameter) Set{{ title $param.Name }}(s string) {
        if p.{{ title $param.Name }} == nil {
            p.{{ title $param.Name }} = new(ID)
        }
        p.{{ title $param.Name }}.SetValue(s)
    }
  {{ end }}
{{ end }}

func (p *{{ title .Name }}Parameter) ToMap() map[string]string {
    m := map[string]string{}
    {{ range $param := .Params }}
      {{ if isBoolean $param.Type }}
        if p.{{ title $param.Name }} != nil {
            if p.{{ title $param.Name }}.GetValue() {
                m["{{ $param.Name }}"] = "true"
            } else {
                m["{{ $param.Name }}"] = "false"
            }
        }
      {{ else }}
        if p.{{ title $param.Name }} != nil {
            m["{{ $param.Name }}"] = fmt.Sprint(p.{{ title $param.Name }}.GetValue())
        }
      {{ end }}
    {{ end }}
    return m
}

type {{ title .Name }}Response struct {
    {{ if isListAPI .Name }}
      Count float64 `json:"count"`
      {{ objectName .Name | title }}  []struct {
    {{ else if isQueryAsyncJobResult .Name }}
    {{ else }}
      {{ objectName .Name | title }}  struct {
    {{ end }}
      {{ range $resp1 := .Response }}
        {{ if and (isList $resp1.Type) $resp1.Response }} 
          {{ title $resp1.Name }} []struct{

            {{ range $resp2 := $resp1.Response }}
              {{ if and (isList $resp2.Type) $resp2.Response }} 
                {{ title $resp2.Name }} []struct{

                  {{ range $resp3 := $resp2.Response }}
                    {{ if and (isList $resp3.Type) $resp3.Response }} 
                      {{ title $resp3.Name }} interface{} `json:"{{ toLower $resp3.Name }}"`
                    {{ else if isList $resp3.Type }}
                      {{ if isIds $resp3.Name }}
                        {{ title $resp3.Name }} []*ID `json:"{{ toLower $resp3.Name }}"`
                      {{ else }}
                        {{ title $resp3.Name }} []*String `json:"{{ toLower $resp3.Name }}"`
                      {{ end }}
                    {{ else if isId $resp3.Name }}
                      {{ title $resp3.Name }} *ID `json:"{{ toLower $resp3.Name }}"`
                    {{ else if $resp3.Name }}
                      {{ title $resp3.Name }} {{ respType $resp3.Type }} `json:"{{ toLower $resp3.Name }}"`
                    {{ end }}
                  {{ end }}

                } `json:"{{ toLower $resp2.Name }}"`
              {{ else if isList $resp2.Type }}
                {{ if isIds $resp2.Name }}
                  {{ title $resp2.Name }} []*ID `json:"{{ toLower $resp2.Name }}"`
                {{ else }}
                  {{ title $resp2.Name }} []*String `json:"{{ toLower $resp2.Name }}"`
                {{ end }}
              {{ else if isId $resp2.Name }}
                {{ title $resp2.Name }} *ID `json:"{{ toLower $resp2.Name }}"`
              {{ else if $resp2.Name }}
                {{ title $resp2.Name }} {{ respType $resp2.Type }} `json:"{{ toLower $resp2.Name }}"`
              {{ end }}
            {{ end }}

          } `json:"{{ toLower $resp1.Name }}"`
        {{ else if isList $resp1.Type }}
          {{ if isIds $resp1.Name }}
            {{ title $resp1.Name }} []*ID `json:"{{ toLower $resp1.Name }}"`
          {{ else }}
            {{ title $resp1.Name }} []*String `json:"{{ toLower $resp1.Name }}"`
          {{ end }}
        {{ else if isId $resp1.Name }}
          {{ title $resp1.Name }} *ID `json:"{{ toLower $resp1.Name }}"`
        {{ else if $resp1.Name }}
          {{ title $resp1.Name }} {{ respType $resp1.Type }} `json:"{{ toLower $resp1.Name }}"`
        {{ end }}

      {{ end }}

    {{ if isQueryAsyncJobResult .Name }}
    {{ else }}
      } `json:"{{ objectName .Name | toLower }}"`
    {{ end }}
}

func (c *CloudStackAPIClient) {{ title .Name }}(p {{ title .Name }}Parameter) (*{{ title .Name }}Response, error) {
    r := c.Request("{{ .Name }}", p.ToMap())
    {{ if .IsAsync }}
      var v struct {
          {{ toLower .Name | title }}response struct {
              Jobid ID `json:"jobid"`
              Id    ID `json:"id"`
          } `json:"{{ toLower .Name }}response"`
      }
      json.Unmarshal(r, &v)
      jobid := v.{{ toLower .Name | title }}response.Jobid

      qp := QueryAsyncJobResultParameter{}
      qp.SetJobid(fmt.Sprint(jobid))
      var qr *QueryAsyncJobResultResponse
      var err error

      for {
          if qr, err = c.QueryAsyncJobResult(qp); err != nil {
              panic(err)
          }
          if qr.Jobstatus != 0 {
              break
          }
          time.Sleep(1 * time.Second)
      }

      resp := new({{ title .Name }}Response)
      json.Unmarshal(qr.Jobresult, resp)
      return resp, nil
    {{ else }}
      v := new (struct {
          {{ toLower .Name | title }}response {{ title .Name }}Response `json:"{{ toLower .Name }}response"`
      })

      json.Unmarshal(r, v)
      return &v.{{ toLower .Name | title }}response, nil
    {{ end }}
}
